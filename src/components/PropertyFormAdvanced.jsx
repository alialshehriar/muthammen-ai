import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Label } from './ui/label';
import { Input } from './ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Button } from './ui/button';
import { Textarea } from './ui/textarea';
import { Checkbox } from './ui/checkbox';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Loader2 } from 'lucide-react';

export default function PropertyFormAdvanced({ onSubmit, isLoading }) {
  const [formData, setFormData] = useState({
    // Basic Information
    city: '',
    district: '',
    propertyType: '',
    area: '',
    builtArea: '',
    age: '',
    condition: '',
    
    // Detailed Information
    floors: '',
    bedrooms: '',
    bathrooms: '',
    livingRooms: '',
    majlis: '',
    finishing: '',
    view: '',
    direction: '',
    streetWidth: '',
    streetType: '',
    corner: false,
    facades: '1',
    
    // Location Details
    distanceToMosque: '',
    distanceToSchool: '',
    distanceToHospital: '',
    distanceToMall: '',
    distanceToMetro: '',
    distanceToMainRoad: '',
    distanceToVision2030: '',
    
    // Facilities
    parking: '',
    elevator: false,
    pool: false,
    garden: false,
    maidRoom: false,
    driverRoom: false,
    externalMajlis: false,
    
    // Finishing Details
    floorType: '',
    doorType: '',
    windowType: '',
    kitchenType: '',
    bathroomType: '',
    paintType: '',
    decorationType: '',
    acType: '',
    
    // Security & Safety
    securitySystem: '',
    alarmSystem: false,
    fireSystem: false,
    fence: false,
    externalLighting: false,
    
    // Legal Status
    deed: '',
    buildingPermit: false,
    occupancyPermit: false,
    approvedPlan: false,
    disputes: false,
    mortgaged: false,
    
    // Usage & Return
    currentUse: '',
    currentRent: '',
    expectedRent: '',
    
    // Additional Notes
    notes: '',
  });

  const handleChange = (name, value) => {
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('๐ Submitting advanced form data:', formData);
    onSubmit(formData);
  };

  const cities = [
    'ุงูุฑูุงุถ', 'ุฌุฏุฉ', 'ุงูุฏูุงู', 'ููุฉ ุงูููุฑูุฉ', 'ุงููุฏููุฉ ุงููููุฑุฉ',
    'ุงูุทุงุฆู', 'ุฃุจูุง', 'ุชุจูู', 'ุงูุฎุจุฑ', 'ุงููุทูู', 'ุญุงุฆู', 'ุฌุงุฒุงู',
    'ูุฌุฑุงู', 'ุงูุจุงุญุฉ', 'ุนุฑุนุฑ', 'ุณูุงูุง', 'ููุจุน', 'ุงูุฌุจูู', 'ุงูุฃุญุณุงุก', 'ุงููุตูู'
  ];

  const propertyTypes = [
    'ูููุง', 'ุดูุฉ', 'ุฏูุจููุณ', 'ุนูุงุฑุฉ ุณูููุฉ', 'ุฃุฑุถ', 'ูุญู ุชุฌุงุฑู',
    'ููุชุจ', 'ูุณุชูุฏุน', 'ูุฒุฑุนุฉ', 'ุงุณุชุฑุงุญุฉ'
  ];

  const propertyAges = [
    'ุฌุฏูุฏ', '1-3 ุณููุงุช', '3-5 ุณููุงุช', '5-10 ุณููุงุช',
    '10-15 ุณูุฉ', '15-20 ุณูุฉ', 'ุฃูุซุฑ ูู 20 ุณูุฉ'
  ];

  const conditions = [
    'ููุชุงุฒ', 'ุฌูุฏ ุฌุฏุงู', 'ุฌูุฏ', 'ูุชูุณุท', 'ูุญุชุงุฌ ุตูุงูุฉ', 'ูุญุชุงุฌ ุชุฑููู'
  ];

  const finishingTypes = [
    'ูุงุฎุฑ', 'ุณูุจุฑ ุฏููููุณ', 'ุฏููููุณ', 'ุนุงุฏู', 'ุจุฏูู ุชุดุทูุจ'
  ];

  const views = [
    'ุดุงุฑุน', 'ุญุฏููุฉ', 'ุจุญุฑ', 'ุฌุจู', 'ูุฏููุฉ', 'ุฏุงุฎููุฉ'
  ];

  const directions = [
    'ุดูุงู', 'ุฌููุจ', 'ุดุฑู', 'ุบุฑุจ', 'ุดูุงู ุดุฑูู', 'ุดูุงู ุบุฑุจู', 'ุฌููุจ ุดุฑูู', 'ุฌููุจ ุบุฑุจู'
  ];

  const streetWidths = [
    '10 ูุชุฑ', '15 ูุชุฑ', '20 ูุชุฑ', '30 ูุชุฑ', '40 ูุชุฑ', 'ุฃูุซุฑ ูู 40 ูุชุฑ'
  ];

  const streetTypes = [
    'ุฑุฆูุณู', 'ูุฑุนู', 'ุชุฌุงุฑู', 'ุณููู'
  ];

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>ูููุฐุฌ ุงูุชูููู ุงููุชูุฏู</CardTitle>
          <CardDescription>
            ุงููุฃ ุฃูุจุฑ ูุฏุฑ ูููู ูู ุงููุนูููุงุช ููุญุตูู ุนูู ุชูููู ุฏููู ูุดุงูู
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="basic" className="w-full">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="basic">ุฃุณุงุณู</TabsTrigger>
              <TabsTrigger value="details">ุชูุงุตูู</TabsTrigger>
              <TabsTrigger value="location">ูููุน</TabsTrigger>
              <TabsTrigger value="facilities">ูุฑุงูู</TabsTrigger>
            </TabsList>

            {/* Basic Information Tab */}
            <TabsContent value="basic" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="city">ุงููุฏููุฉ *</Label>
                  <Select value={formData.city} onValueChange={(value) => handleChange('city', value)}>
                    <SelectTrigger id="city">
                      <SelectValue placeholder="ุงุฎุชุฑ ุงููุฏููุฉ" />
                    </SelectTrigger>
                    <SelectContent>
                      {cities.map(city => (
                        <SelectItem key={city} value={city}>{city}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="district">ุงูุญู</Label>
                  <Input
                    id="district"
                    value={formData.district}
                    onChange={(e) => handleChange('district', e.target.value)}
                    placeholder="ูุซุงู: ุงููุงุณููู"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="propertyType">ููุน ุงูุนูุงุฑ *</Label>
                  <Select value={formData.propertyType} onValueChange={(value) => handleChange('propertyType', value)}>
                    <SelectTrigger id="propertyType">
                      <SelectValue placeholder="ุงุฎุชุฑ ููุน ุงูุนูุงุฑ" />
                    </SelectTrigger>
                    <SelectContent>
                      {propertyTypes.map(type => (
                        <SelectItem key={type} value={type}>{type}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="area">ูุณุงุญุฉ ุงูุฃุฑุถ (ูยฒ) *</Label>
                  <Input
                    id="area"
                    type="number"
                    value={formData.area}
                    onChange={(e) => handleChange('area', e.target.value)}
                    placeholder="300"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="builtArea">ูุณุงุญุฉ ุงูุจูุงุก (ูยฒ)</Label>
                  <Input
                    id="builtArea"
                    type="number"
                    value={formData.builtArea}
                    onChange={(e) => handleChange('builtArea', e.target.value)}
                    placeholder="250"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="age">ุนูุฑ ุงูุนูุงุฑ</Label>
                  <Select value={formData.age} onValueChange={(value) => handleChange('age', value)}>
                    <SelectTrigger id="age">
                      <SelectValue placeholder="ุงุฎุชุฑ ุนูุฑ ุงูุนูุงุฑ" />
                    </SelectTrigger>
                    <SelectContent>
                      {propertyAges.map(age => (
                        <SelectItem key={age} value={age}>{age}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="condition">ุญุงูุฉ ุงูุนูุงุฑ</Label>
                  <Select value={formData.condition} onValueChange={(value) => handleChange('condition', value)}>
                    <SelectTrigger id="condition">
                      <SelectValue placeholder="ุงุฎุชุฑ ุงูุญุงูุฉ" />
                    </SelectTrigger>
                    <SelectContent>
                      {conditions.map(condition => (
                        <SelectItem key={condition} value={condition}>{condition}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </TabsContent>

            {/* Details Tab */}
            <TabsContent value="details" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="floors">ุนุฏุฏ ุงูุทูุงุจู</Label>
                  <Input
                    id="floors"
                    type="number"
                    value={formData.floors}
                    onChange={(e) => handleChange('floors', e.target.value)}
                    placeholder="2"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="bedrooms">ุนุฏุฏ ุงูุบุฑู</Label>
                  <Input
                    id="bedrooms"
                    type="number"
                    value={formData.bedrooms}
                    onChange={(e) => handleChange('bedrooms', e.target.value)}
                    placeholder="4"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="bathrooms">ุนุฏุฏ ุงูุญูุงูุงุช</Label>
                  <Input
                    id="bathrooms"
                    type="number"
                    value={formData.bathrooms}
                    onChange={(e) => handleChange('bathrooms', e.target.value)}
                    placeholder="3"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="livingRooms">ุนุฏุฏ ุงูุตุงูุงุช</Label>
                  <Input
                    id="livingRooms"
                    type="number"
                    value={formData.livingRooms}
                    onChange={(e) => handleChange('livingRooms', e.target.value)}
                    placeholder="2"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="majlis">ุนุฏุฏ ุงููุฌุงูุณ</Label>
                  <Input
                    id="majlis"
                    type="number"
                    value={formData.majlis}
                    onChange={(e) => handleChange('majlis', e.target.value)}
                    placeholder="1"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="finishing">ููุน ุงูุชุดุทูุจ</Label>
                  <Select value={formData.finishing} onValueChange={(value) => handleChange('finishing', value)}>
                    <SelectTrigger id="finishing">
                      <SelectValue placeholder="ุงุฎุชุฑ ููุน ุงูุชุดุทูุจ" />
                    </SelectTrigger>
                    <SelectContent>
                      {finishingTypes.map(type => (
                        <SelectItem key={type} value={type}>{type}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="view">ุงูุฅุทูุงูุฉ</Label>
                  <Select value={formData.view} onValueChange={(value) => handleChange('view', value)}>
                    <SelectTrigger id="view">
                      <SelectValue placeholder="ุงุฎุชุฑ ุงูุฅุทูุงูุฉ" />
                    </SelectTrigger>
                    <SelectContent>
                      {views.map(view => (
                        <SelectItem key={view} value={view}>{view}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="direction">ุงูุงุชุฌุงู</Label>
                  <Select value={formData.direction} onValueChange={(value) => handleChange('direction', value)}>
                    <SelectTrigger id="direction">
                      <SelectValue placeholder="ุงุฎุชุฑ ุงูุงุชุฌุงู" />
                    </SelectTrigger>
                    <SelectContent>
                      {directions.map(dir => (
                        <SelectItem key={dir} value={dir}>{dir}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="streetWidth">ุนุฑุถ ุงูุดุงุฑุน</Label>
                  <Select value={formData.streetWidth} onValueChange={(value) => handleChange('streetWidth', value)}>
                    <SelectTrigger id="streetWidth">
                      <SelectValue placeholder="ุงุฎุชุฑ ุนุฑุถ ุงูุดุงุฑุน" />
                    </SelectTrigger>
                    <SelectContent>
                      {streetWidths.map(width => (
                        <SelectItem key={width} value={width}>{width}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="streetType">ููุน ุงูุดุงุฑุน</Label>
                  <Select value={formData.streetType} onValueChange={(value) => handleChange('streetType', value)}>
                    <SelectTrigger id="streetType">
                      <SelectValue placeholder="ุงุฎุชุฑ ููุน ุงูุดุงุฑุน" />
                    </SelectTrigger>
                    <SelectContent>
                      {streetTypes.map(type => (
                        <SelectItem key={type} value={type}>{type}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="flex items-center space-x-2 space-x-reverse">
                  <Checkbox
                    id="corner"
                    checked={formData.corner}
                    onCheckedChange={(checked) => handleChange('corner', checked)}
                  />
                  <Label htmlFor="corner">ุฒุงููุฉ</Label>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="facades">ุนุฏุฏ ุงููุงุฌูุงุช</Label>
                  <Select value={formData.facades} onValueChange={(value) => handleChange('facades', value)}>
                    <SelectTrigger id="facades">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1">ูุงุฌูุฉ ูุงุญุฏุฉ</SelectItem>
                      <SelectItem value="2">ูุงุฌูุชุงู</SelectItem>
                      <SelectItem value="3">ุซูุงุซ ูุงุฌูุงุช</SelectItem>
                      <SelectItem value="4">ุฃุฑุจุน ูุงุฌูุงุช</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </TabsContent>

            {/* Location Tab */}
            <TabsContent value="location" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="distanceToMosque">ุงููุณุงูุฉ ูู ุงููุณุฌุฏ (ูุชุฑ)</Label>
                  <Input
                    id="distanceToMosque"
                    type="number"
                    value={formData.distanceToMosque}
                    onChange={(e) => handleChange('distanceToMosque', e.target.value)}
                    placeholder="200"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="distanceToSchool">ุงููุณุงูุฉ ูู ุงููุฏุฑุณุฉ (ูุชุฑ)</Label>
                  <Input
                    id="distanceToSchool"
                    type="number"
                    value={formData.distanceToSchool}
                    onChange={(e) => handleChange('distanceToSchool', e.target.value)}
                    placeholder="500"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="distanceToHospital">ุงููุณุงูุฉ ูู ุงููุณุชุดูู (ูู)</Label>
                  <Input
                    id="distanceToHospital"
                    type="number"
                    value={formData.distanceToHospital}
                    onChange={(e) => handleChange('distanceToHospital', e.target.value)}
                    placeholder="2"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="distanceToMall">ุงููุณุงูุฉ ูู ุงูููู (ูู)</Label>
                  <Input
                    id="distanceToMall"
                    type="number"
                    value={formData.distanceToMall}
                    onChange={(e) => handleChange('distanceToMall', e.target.value)}
                    placeholder="3"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="distanceToMetro">ุงููุณุงูุฉ ูู ูุญุทุฉ ุงููุชุฑู (ูู)</Label>
                  <Input
                    id="distanceToMetro"
                    type="number"
                    value={formData.distanceToMetro}
                    onChange={(e) => handleChange('distanceToMetro', e.target.value)}
                    placeholder="1.5"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="distanceToMainRoad">ุงููุณุงูุฉ ูู ุงูุทุฑูู ุงูุฑุฆูุณู (ูุชุฑ)</Label>
                  <Input
                    id="distanceToMainRoad"
                    type="number"
                    value={formData.distanceToMainRoad}
                    onChange={(e) => handleChange('distanceToMainRoad', e.target.value)}
                    placeholder="500"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="distanceToVision2030">ุงููุณุงูุฉ ูู ูุดุงุฑูุน ุฑุคูุฉ 2030 (ูู)</Label>
                  <Input
                    id="distanceToVision2030"
                    type="number"
                    value={formData.distanceToVision2030}
                    onChange={(e) => handleChange('distanceToVision2030', e.target.value)}
                    placeholder="15"
                  />
                </div>
              </div>
            </TabsContent>

            {/* Facilities Tab */}
            <TabsContent value="facilities" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="parking">ุนุฏุฏ ููุงูู ุงูุณูุงุฑุงุช</Label>
                  <Input
                    id="parking"
                    type="number"
                    value={formData.parking}
                    onChange={(e) => handleChange('parking', e.target.value)}
                    placeholder="2"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="currentRent">ุงูุฅูุฌุงุฑ ุงูุญุงูู (ุฑูุงู/ุดูุฑ)</Label>
                  <Input
                    id="currentRent"
                    type="number"
                    value={formData.currentRent}
                    onChange={(e) => handleChange('currentRent', e.target.value)}
                    placeholder="3000"
                  />
                </div>

                <div className="flex items-center space-x-2 space-x-reverse">
                  <Checkbox
                    id="elevator"
                    checked={formData.elevator}
                    onCheckedChange={(checked) => handleChange('elevator', checked)}
                  />
                  <Label htmlFor="elevator">ูุตุนุฏ</Label>
                </div>

                <div className="flex items-center space-x-2 space-x-reverse">
                  <Checkbox
                    id="pool"
                    checked={formData.pool}
                    onCheckedChange={(checked) => handleChange('pool', checked)}
                  />
                  <Label htmlFor="pool">ูุณุจุญ</Label>
                </div>

                <div className="flex items-center space-x-2 space-x-reverse">
                  <Checkbox
                    id="garden"
                    checked={formData.garden}
                    onCheckedChange={(checked) => handleChange('garden', checked)}
                  />
                  <Label htmlFor="garden">ุญุฏููุฉ</Label>
                </div>

                <div className="flex items-center space-x-2 space-x-reverse">
                  <Checkbox
                    id="maidRoom"
                    checked={formData.maidRoom}
                    onCheckedChange={(checked) => handleChange('maidRoom', checked)}
                  />
                  <Label htmlFor="maidRoom">ุบุฑูุฉ ุฎุงุฏูุฉ</Label>
                </div>

                <div className="flex items-center space-x-2 space-x-reverse">
                  <Checkbox
                    id="driverRoom"
                    checked={formData.driverRoom}
                    onCheckedChange={(checked) => handleChange('driverRoom', checked)}
                  />
                  <Label htmlFor="driverRoom">ุบุฑูุฉ ุณุงุฆู</Label>
                </div>

                <div className="flex items-center space-x-2 space-x-reverse">
                  <Checkbox
                    id="externalMajlis"
                    checked={formData.externalMajlis}
                    onCheckedChange={(checked) => handleChange('externalMajlis', checked)}
                  />
                  <Label htmlFor="externalMajlis">ูุฌูุณ ุฎุงุฑุฌู</Label>
                </div>

                <div className="col-span-2 space-y-2">
                  <Label htmlFor="notes">ููุงุญุธุงุช ุฅุถุงููุฉ</Label>
                  <Textarea
                    id="notes"
                    value={formData.notes}
                    onChange={(e) => handleChange('notes', e.target.value)}
                    placeholder="ุฃู ูุนูููุงุช ุฅุถุงููุฉ ุชูุฏ ุฅุถุงูุชูุง..."
                    rows={4}
                  />
                </div>
              </div>
            </TabsContent>
          </Tabs>

          <div className="mt-6">
            <Button
              type="submit"
              className="w-full"
              disabled={isLoading || !formData.city || !formData.area}
            >
              {isLoading ? (
                <>
                  <Loader2 className="ml-2 h-4 w-4 animate-spin" />
                  ุฌุงุฑู ุงูุชูููู...
                </>
              ) : (
                'ุงุญุตู ุนูู ุชูููู ุฃุฏู ูู ุงููุซูู ุงูุจุดุฑู'
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
    </form>
  );
}

